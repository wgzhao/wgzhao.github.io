<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WEB开发 | Linux系统管理]]></title>
  <link href="http://wgzhao.github.io//categories/webkai-fa/atom.xml" rel="self"/>
  <link href="http://wgzhao.github.io/"/>
  <updated>2014-03-15T13:10:39+08:00</updated>
  <id>http://wgzhao.github.io/</id>
  <author>
    <name><![CDATA[wgzhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL查询工具网站的部署]]></title>
    <link href="http://wgzhao.github.io/2011/09/20/clone-explain-depesz-com-website/"/>
    <updated>2011-09-20T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2011/09/20/clone-explain-depesz-com-website</id>
    <content type="html"><![CDATA[<p>从 IRC #postgresql 频道了解到一个网站: <a href="http://explain.depesz.com">http://explain.depesz.com</a> 其口号是：</p>

<blockquote><p>A tool for finding a real cause for slow queries</p></blockquote>

<p>方法是粘贴你的 <code>explain
sql</code> 语句结构。
他可以根据结果生成HTML格式的解释页面，其中用不同颜色来标识子语句所占用的资源情况，其中颜色越深，标识所占用的资源越多。<br/>
同时它还给出了两张统计列表，一张是按照索引类型来统计占用的时间，及比率；另外一种是根据SQL语句中涉及到的表来统计查询每张表所占用的时间及比率。
不仅如此，这个网站代码还是开源的，托管在github上。地址为：
<a href="https://github.com/depesz/explain.depesz.com">https://github.com/depesz/explain.depesz.com</a></p>

<p>下面是搭建过程：</p>

<!--more-->


<ol>
<li>环境：Debian unstable 64bit</li>
<li>首先安装网站代码以来的perl框架mojolicious，可以从<a href="http://www.mojolicious.org/">http://www.mojolicious.org/</a>
下载源代码编译安装。不过Debian的源里有这个软件，可以直接通过<code>sudo apt-get install mojolicious</code> 来安装。
2)从<a href="http://backpan.perl.org/authors/id/D/DE/DEPESZ/Pg-Explain-0.61.tar.gz">http://backpan.perl.org/authors/id/D/DE/DEPESZ/Pg-Explain-0.61.tar.gz</a>
下载分析explain SQL的perl模块，这个模块也是网站作者编写的。下载解压，执行<code>perl Build.pl</code>
，如果提示有模块没有安装，则执行 <code>./Build installdeps</code> 而后执行 <code>./Build install</code> 即可。</li>
<li><p>下载explain.depesze.com的源代码</p>

<pre><code> cd /home/wgzhao/websites/
 git clone https://github.com/depesz/explain.depesz.com.git  explain
</code></pre></li>
<li><p>网站默认使用的是postgresql数据库，我们修改
<code>explain.json</code>文件中关于database区域的相关信息。保证perl能正确连接上数据库。</p></li>
<li><p>用psql连接postgresql，创建<code>explain.json</code>里设置的数据库名，并导入<code>sql/create.sql</code>文件。</p></li>
<li><p>执行<code>morbo  --verbose ./explain.pl</code> 根据提示，如果报一些perl模块找不到，先安装这些模块。直到上述指令出现类似下面的结果：<br/>
     [Tue Sep 20 18:17:37 2011]<br/>
     [info] Server listening (<a href="http://*:3000">http://*:3000</a>) Server available at <a href="http://127.0.0.1:3000.">http://127.0.0.1:3000.</a></p></li>
<li>打开浏览器，访问 <a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a>，看看是不是获得了和<a href="http://explain.depesz.com/">http://explain.depesz.com/</a> 一样的效果？</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Public DNS Servers]]></title>
    <link href="http://wgzhao.github.io/2010/08/24/public-dns-servers/"/>
    <updated>2010-08-24T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2010/08/24/public-dns-servers</id>
    <content type="html"><![CDATA[<p>Norton DNS (198.153.192.1, 198.153.194.1)<br/>
OpenDNS (208.67.222.222,208.67.220.220)<br/>
OpenDNS Family (208.67.222.123, 208.67.220.123) <br/>
Comodo Secure DNS (156.154.70.22, 156.156.71.22)<br/>
ScrubIt DNS (67.138.54.100,207.225.209.66)<br/>
DNS Advantage (156.154.70.1, 156.154.71.1)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用python解决amule中文乱码的问题]]></title>
    <link href="http://wgzhao.github.io/2010/06/18/correct-ed2k-links-with-python/"/>
    <updated>2010-06-18T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2010/06/18/correct-ed2k-links-with-python</id>
    <content type="html"><![CDATA[<p>Linux下的amule并不会对链接做编码转换，也就是说，比如下面这样的链接地址：</p>

<p><code>ed2k://|file|%E7%94%9F%E6%B4%BB%E5%A4%A7%E7%88%86%E7%82%B8.The.Big.Bang.Theory.S02E15.Chi_Eng.HR-HDTV.AC3.960X528.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.avi|230043648|e49a10d7052b5dfee4aa8b3336b76301|h=qkhaltxhuygwphznp2holcvdarxki3e6|/</code></p>

<p>直接交给amule下载时，给出的文件名就会变成下面这个样子：</p>

<p><code>ç”Ÿæ´»å¤§çˆ†ç‚¸.The.Big.Bang.Theory.S02E04.Chi_Eng.HR-HDTV.AC3.960X528.x264-YYeTsäººäººå½±è§†.avi</code></p>

<p>所以需要我们自己先把链接转变成“正确”的编码，然后交给amule，还是上面那个链接，转换过来就是：</p>

<!--more-->


<p><code>ed2k://|file|生活大爆炸.The.Big.Bang.Theory.S02E15.Chi\_Eng.HR-HDTV.AC3.960X528.x264-YYeTs人人影视.avi|230043648|e49a10d7052b5dfee4aa8b3336b76301|h=qkhaltxhuygwphznp2holcvdarxki3e6|</code></p>

<p>这样交给amule就会获得正确的文件名。 如果你一次性获得大量的这样链接，我们可以简单的写个脚本来转换，这里用Python演示，代码如下：</p>

<p>File /Users/wgzhao/Codes/wgzhao.github.io/source/downloads/code/encoding could not be found</p>

<p>上面的代码针对需求做了一些改进，那就是你只需要提供带有ed2k链接的页面，脚本会自动分析并转码，这样，你只需要复制屏幕上的输出，然后粘贴到amule即可。
即便是这样，有人可能觉得还是麻烦，如果在复制的时候，同时就完成了转码，那不更好吗？恩，人的欲望是无止境的，要做到这点，就得监控粘贴板了。</p>

<p>学习Python时间不长，对X不太了解，google了一番，<a href="http://github.com/nkchenz/watchmen/raw/9af2be161184f250276b723233e84eb9a1c92e03/watchmen.py">找到了一个样例代码</a>，照葫芦画瓢，变成了下面的代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ed2k_monitor.py)</span> <a href='/downloads/code/ed2k_monitor.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/python -tt</span>
</span><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'><span class="n">__DOC__</span><span class="o">=</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">monitor your clipboard</span>
</span><span class='line'><span class="s">convert your ed2k links into &quot;correct&quot; encode</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">gtk</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ed2kConvert</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">clip</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">clipboard_get</span><span class="p">(</span><span class="n">gtk</span><span class="o">.</span><span class="n">gdk</span><span class="o">.</span><span class="n">SELECTION_CLIPBOARD</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">clip</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;owner-change&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_clipboard_changed</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">ed2k_handler</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">links</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        use unquote method included by urllib2 correct nonormal url</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">cvtlinks</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">links</span><span class="p">:</span>
</span><span class='line'>            <span class="n">link</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">unquote</span><span class="p">(</span><span class="n">link</span><span class="p">)</span>
</span><span class='line'>            <span class="n">cvtlinks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">link</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">clip</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cvtlinks</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_clipboard_changed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">clipboard</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">clipboard</span><span class="o">.</span><span class="n">wait_for_text</span><span class="p">()</span>
</span><span class='line'>        <span class="c">#print text</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">plugins_routing</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">plugins_routing</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;(ed2k://.*?/)&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">matches</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">matches</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ed2k_handler</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Ed2kConvert</span><span class="p">()</span>
</span><span class='line'>    <span class="n">gtk</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行该脚本到后台，尝试复制ed2k链接，然后粘贴看看，是不是改变了？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Lucid下将django部署到nginx上]]></title>
    <link href="http://wgzhao.github.io/2010/05/20/deploy-django-with-nginx/"/>
    <updated>2010-05-20T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2010/05/20/deploy-django-with-nginx</id>
    <content type="html"><![CDATA[<p>我说的都是偷懒的办法，也就是不重新编译nginx，也不从网络上下载最新的django版本，一切都是从Ubuntu的仓库中取。<br/>
所以版本如下：</p>

<pre><code>﻿nginx 0.7.65-1ubuntu 
python-django 1.1.1-2ubuntu1
</code></pre>

<p>假定创建的django项目在<code>/home/websites/pysites</code>下。
首先，配置<code>Nginx</code>。只需要改动<code>/etc/nginx/sites-enable/default</code>文件的<code>location/</code>区域，增加几行代码，类似如下：</p>

<pre><code>location / {
    fastcgi_pass 127.0.0.1:8080;
    root   /home/websites/public_html/pysites;
    index  index.html index.htm;
    include fastcgi_params;
}
</code></pre>

<p>实际上就是增加了<code>fastcgi_pass</code>和<code>root</code>两行。 然后以<code>fastcgi</code>模式启动django</p>

<pre><code>$ cd /home/websites/public_html/pysites
$./manager.py runfcgi host=127.0.0.1 port=8080 --pythonpath=/home/websites/public_html/pysites
</code></pre>

<p>访问<a href="http://localhost/">http://localhost/</a> 是不是看到了首页。
恩，一切看上去都很美好。 但是， 尝试访问
<a href="http://localhost/path">http://localhost/path</a> 这里的URL地址试试？
你就会发现，无论访问怎样的路径，都仅仅只是显示首页，而不是你期望的出现其他页面试图。 这是一个BUG，详细的情况参考这个链接 <a href="http://code.djangoproject.com/ticket/8874">#8874</a> <br/>
解决的办法就是<br/>
1. 从<a href="http://code.djangoproject.com/attachment/ticket/8874/wsgi.patch?format=raw">这里</a>(或者<a href="http://dl.dropbox.com/u/220586/wsgi.patch">这里</a>，需要翻/墙）下载补丁文件，放到<code>/usr/share/pyshared/django/core/handlers/</code>目录下，保存为<code>wsgi.patch</code>文件。<br/>
2. 为了保险起见，备份上述目录下的<code>wsgi.py</code>文件 ( <code>cp wsgi.py wsgi_orig.py</code>) <br/>
3. 应用补丁 patch -p0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox Startup Lessons Learned]]></title>
    <link href="http://wgzhao.github.io/2010/05/12/dropbox-startup-lessons-learned/"/>
    <updated>2010-05-12T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2010/05/12/dropbox-startup-lessons-learned</id>
    <content type="html"><![CDATA[<p><a href="/uploads/2010/05/dropbox-startuplessonslearned-100423230315-phpapp02.ppt">Dropbox startup lessons learned</a></p>

<p>悼念Dropbox</p>
]]></content>
  </entry>
  
</feed>
