<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WEB开发 | Linux系统管理]]></title>
  <link href="http://wgzhao.github.io//categories/webkai-fa/atom.xml" rel="self"/>
  <link href="http://wgzhao.github.io/"/>
  <updated>2014-03-16T20:33:53+08:00</updated>
  <id>http://wgzhao.github.io/</id>
  <author>
    <name><![CDATA[wgzhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL查询工具网站的部署]]></title>
    <link href="http://wgzhao.github.io/2011/09/20/clone-explain-depesz-com-website/"/>
    <updated>2011-09-20T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2011/09/20/clone-explain-depesz-com-website</id>
    <content type="html"><![CDATA[<p>从 IRC #postgresql 频道了解到一个网站: <a href="http://explain.depesz.com">http://explain.depesz.com</a> 其口号是：</p>

<blockquote><p>A tool for finding a real cause for slow queries</p></blockquote>

<p>方法是粘贴你的 <code>explain
sql</code> 语句结构。
他可以根据结果生成HTML格式的解释页面，其中用不同颜色来标识子语句所占用的资源情况，其中颜色越深，标识所占用的资源越多。<br/>
同时它还给出了两张统计列表，一张是按照索引类型来统计占用的时间，及比率；另外一种是根据SQL语句中涉及到的表来统计查询每张表所占用的时间及比率。
不仅如此，这个网站代码还是开源的，托管在github上。地址为：
<a href="https://github.com/depesz/explain.depesz.com">https://github.com/depesz/explain.depesz.com</a></p>

<p>下面是搭建过程：</p>

<!--more-->


<ol>
<li>环境：Debian unstable 64bit</li>
<li>首先安装网站代码以来的perl框架mojolicious，可以从<a href="http://www.mojolicious.org/">http://www.mojolicious.org/</a>
下载源代码编译安装。不过Debian的源里有这个软件，可以直接通过<code>sudo apt-get install mojolicious</code> 来安装。
2)从<a href="http://backpan.perl.org/authors/id/D/DE/DEPESZ/Pg-Explain-0.61.tar.gz">http://backpan.perl.org/authors/id/D/DE/DEPESZ/Pg-Explain-0.61.tar.gz</a>
下载分析explain SQL的perl模块，这个模块也是网站作者编写的。下载解压，执行<code>perl Build.pl</code>
，如果提示有模块没有安装，则执行 <code>./Build installdeps</code> 而后执行 <code>./Build install</code> 即可。</li>
<li><p>下载explain.depesze.com的源代码</p>

<pre><code> cd /home/wgzhao/websites/
 git clone https://github.com/depesz/explain.depesz.com.git  explain
</code></pre></li>
<li><p>网站默认使用的是postgresql数据库，我们修改
<code>explain.json</code>文件中关于database区域的相关信息。保证perl能正确连接上数据库。</p></li>
<li><p>用psql连接postgresql，创建<code>explain.json</code>里设置的数据库名，并导入<code>sql/create.sql</code>文件。</p></li>
<li><p>执行<code>morbo  --verbose ./explain.pl</code> 根据提示，如果报一些perl模块找不到，先安装这些模块。直到上述指令出现类似下面的结果：<br/>
     [Tue Sep 20 18:17:37 2011]<br/>
     [info] Server listening (<a href="http://*:3000">http://*:3000</a>) Server available at <a href="http://127.0.0.1:3000.">http://127.0.0.1:3000.</a></p></li>
<li>打开浏览器，访问 <a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a>，看看是不是获得了和<a href="http://explain.depesz.com/">http://explain.depesz.com/</a> 一样的效果？</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache配置动态虚拟主机]]></title>
    <link href="http://wgzhao.github.io/2008/09/11/Dynamic-Host-Configuration-apache-virtual/"/>
    <updated>2008-09-11T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2008/09/11/Dynamic-Host-Configuration-apache-virtual</id>
    <content type="html"><![CDATA[<p>很惭愧，知道今天才知道Aapche可以基于域名或者IP来动态配置虚拟主机。</p>

<p>这样，你只要在特定的目录建立域名目录，那么你的虚拟主机就配置好了，而必须许该httpd.conf文件，更重要的是，不要重启Apache服务。
否则的话，在有大量域名的情况下，修改配置的方式管理这些域名是一个噩梦。</p>

<p>不知道我的意思说明白了没有，那就举我的配置例子简单说明一下：</p>

<p>首先让apache加载<code>vhost_alias</code>模块<br/>
编辑<code>/etc/httpd/conf/httpd.conf</code>，确保有下面这样一行：<br/>
<code>LoadModule vhost_alias_module modules/mod_vhost_alias.so</code></p>

<!--more-->


<p>然后在<code>/etc/httpd/conf.d/</code>目录下创建<code>vhost.conf</code>文件，内容如下：</p>

<pre><code># get the server name from host: header info 
UseCanonicalName off
#use different log file accord to different virtual host LogFormat "%V
%h %l %u %t "%r" %s %b" vcommon CustomLog logs/vhost_log vcommon
#include the servername 
VirtualDocumentRoot /web/websites/%0/
VirtualScriptAlias /web/websites/%0/cgi-bin 
</code></pre>

<p>假设你有两个站点www.foo.com和www.bar.com，那么你只需要在<code>/web/websites/</code>创建对应的www.foo.com和www.bar.com目录，然后尝试访问这两个域名试试（当然前提是DNS指向其服务器）</p>

<p>上述的核心应该是依赖日志文件的格式，因此了解日志格式变量的意义对于我们举一反三很有好处，贴出如下：</p>

<p>%a: 远程IP地址<br/>
%A: 本地IP地址<br/>
%B: 已发送的字节数，不包含HTTP头<br/>
%b: CLF格式的已发送字节数量，不包含HTTP头。例如当没有发送数据时，写入‘-’而不是0。<br/>
%{FOOBAR}e: 环境变量FOOBAR的内容<br/>
%f: 文件名字<br/>
%h: 远程主机<br/>
%H: 请求的协议<br/>
%{Foobar}i: Foobar的内容，发送给服务器的请求的标头行。<br/>
%l: 远程登录名字（来自identd，如提供的话）<br/>
%m: 请求的方法<br/>
%{Foobar}n: 来自另外一个模块的注解“Foobar”的内容<br/>
%{Foobar}o: Foobar的内容，应答的标头行<br/>
%p: 服务器响应请求时使用的端口<br/>
%P: 响应请求的子进程ID。<br/>
%q: 查询字符串（如果存在查询字符串，则包含“?”后面的部分；否则，它是一个空字符串。）
%r: 请求的第一行<br/>
%s: 状态。对于进行内部重定向的请求，这是指<em>原来</em>请求的状态。如果用%>s，则是指后来的请求。<br/>
%t: 以公共日志时间格式表示的时间（或称为标准英文格式）<br/>
%{format}t: 以指定格式format表示的时间<br/>
%T: 为响应请求而耗费的时间，以秒计<br/>
%u: 远程用户（来自auth；如果返回状态（%s）是401则可能是伪造的）<br/>
%U: 用户所请求的URL路径<br/>
%v: 响应请求的服务器的ServerName<br/>
%V: 依照UseCanonicalName设置得到的服务器名字</p>

<p>这个指南已经包含在Apache发布包里，如果手头没有文档，可以看看这个官方的 <a href="http://httpd.apache.org/docs/2.0/vhosts/mass.html">http://httpd.apache.org/docs/2.0/vhosts/mass.html</a>
里面分别提到了2.0版本和1.3分别如何实现。</p>

<p>如果你对洋文不感兴趣，我找到一个中文的，<a href="http://w.yi.org/ftp/FAPM/apache/Apache2/zh/vhosts/mass.html">移步这里看看</a></p>

<p><strong>Update: 2008.9.12</strong></p>

<p>原谅我的肤浅，日志文件格式并不是动态虚拟主机配置的依赖，下面<a href="http://apache.chinahtml.com/mod/mod_vhost_alias.html">这篇文档</a>才是其正解。当然Aapche发布包里也有这篇文档。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feedburner可以访问啦]]></title>
    <link href="http://wgzhao.github.io/2008/01/02/can-access-feedburner/"/>
    <updated>2008-01-02T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2008/01/02/can-access-feedburner</id>
    <content type="html"><![CDATA[<p>吃完饭，开始看订阅的新闻，突然发现今天怎么更新的新闻这么多，好多很久没有更新的feeds也更新了，发生了什么事情，突然想起，是不是<a href="http://www.feedburner.com">feedburner.com</a>可以访问了，再看我的blog，果然是这样。</p>

<p>哈哈，2008年国内网络第一件好事情呀！</p>

<p>这是谁干的呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置apache+svn+trac]]></title>
    <link href="http://wgzhao.github.io/2007/08/29/configure-apache-svn-trac/"/>
    <updated>2007-08-29T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2007/08/29/configure-apache-svn-trac</id>
    <content type="html"><![CDATA[<p>以前做一些小的项目，没有怎么用到svn之类的版本控制软件，因为项目本身就很小，几十个文件，基本上也没有太多的改动。所以都是采用直接备份文件方式来防止工作间的文件丢失。</p>

<p>这次自己想做的一个小东西，虽然不大，但是希望把开发过程正规起来，不能总是采用远古的作坊式了，为了直接一步和国际流行的开发方式接轨，这次我直接使用了目前比较流行的源代码浏览工具&mdash;trac。下面是我的配置过程，和大家分享。</p>

<!--more-->


<ol>
<li>首先需要配置SVN，这是核心和基础，只有设置好了SVN才有可能做下面的过程。
不过SVN还是挺好用的，步骤也简洁：
     [root@mlsx home]#svnadmin create /data/ytqpki
     [root@mlsx home]#svn import /var/www/html/app file:///data/ytqpki -m &ldquo;initial&rdquo; 新增 /var/www/html/app/vendors
     新增 /var/www/html/app/vendors/empty
     新增 /var/www/html/app/tmp
     新增 /var/www/html/app/tmp/tests
     &hellip;&hellip;&hellip;&hellip;&hellip;</li>
</ol>


<p>第一个命令创建仓库，第二个命令导入初始化的文件。
当然你还可以继续导入，导入后，源文件就可以删除了。</p>

<p>这是建立仓库的过程，如果要开始编写代码，你还需要创建自己的第一个版本代码，也就是到处一份程序。</p>

<pre><code>    [root@mlsx home]# svn co file:///data/ytqpki /home/htdocs/
    A /home/htdocs/app
    A /home/htdocs/app/tmp
    A /home/htdocs/app/tmp/tests
    A /home/htdocs/app/tmp/tests/empty
    A /home/htdocs/app/tmp/cache
    ……
</code></pre>

<p><code>/home/htdocs/</code>就是现在的工作目录了，所有代码的增加修改都在这里执行，需要提交，就使用svn up,svn add,svn
ci。更多的使用方法可以参考有关SVN的指南。</p>

<ol>
<li><p>安装和配置apache+svn<br/>
对于Linux系统而言，apache都是预安装好了，不过需要检查是否安装了<code>mod_dav_svn</code>这个模块，如果没有，需要安装上。注意：<code>mod_dav_svn</code>模块的版本号应该和subversion的版本号一致。<br/>
安装完成后，编辑<code>/etc/httpd/conf.d/subversion.conf</code>文件，再最后加上下面几行</p>

<pre><code>  DAV svn
  SVNParentPath /data
  #
  # # Limit write permission to list of valid users.

  # Require SSL connection for password protection.
  # SSLRequireSSL
  #
  AuthType Basic
  AuthName “Authorization Realm”
  AuthUserFile /etc/svnpwdfile
  Require valid-user 
</code></pre></li>
</ol>


<p>然后，我们htpasswd创建<code>/etc/svnpawdfile</code>文件</p>

<pre><code>    [root@mlsx ~]# htpasswd -c /etc/snvpwdfile admin
    New password:
    Re-type new password:
    Adding password for user admin
    [root@mlsx ~]# htpasswd /etc/snvpwdfile mlsx
    New password:
    Re-type new password:
    Adding password for user mlsx
</code></pre>

<p>OK，现在重启你的apache，访问<a href="http://localhost/repos/ytqpki%E7%9C%8B%E7%9C%8B%E3%80%82  ">http://localhost/repos/ytqpki%E7%9C%8B%E7%9C%8B%E3%80%82  </a>
如果得到下面类似的界面，那么svn访问表示成功了。</p>

<p><img src="/uploads/screen1.png" alt="image" /></p>

<p>这个时候，你也可以使用通过http方式取得svn仓库内的文档了。</p>

<pre><code>    [root@mlsx ~]# svn co http://localhost/repos/ytqpki/app /tmp/
    A /tmp/tmp
    A /tmp/tmp/tests
    A /tmp/tmp/tests/empty
    A /tmp/tmp/cache
    A /tmp/tmp/cache/persistent
    A /tmp/tmp/cache/persistent/empty
    A /tmp/tmp/cache/models
    A /tmp/tmp/cache/models/default_admins
    …….
</code></pre>

<ol>
<li><p>配置trac
<a href="http://trac.edgewall.org/">trac</a>是一个非常优秀的源代码浏览工具，现在也很流行。<br/>
安装trac之前，还需要安装一些其他东西，首先是python，这个一般都安装了，其次是<a href="http://www.clearsilver.net/">ClearSilver</a>，最后是一个能够被python支持的数据库，默认是<a href="http://www.sqlite.org/">SQLite</a>。
上面的要求，一般来说，只有ClearSilver没有安装，下载最新的版本，分别执行<code>./configure --with-python=/usr/bin/python ; make; make install</code>就搞定了。 <br/>
然后下载最新的trac程序，解压，执行下面的指令<br/>
<code>./setup.py install</code><br/>
安装完成后,开始配置</p>

<pre><code>  [root@mlsx trac-0.10.4]# trac-admin /home/ytqpki initenv
  Creating a new Trac environment at /home/ytqpki
  Trac will first ask a few questions about your environment
  in order to initalize and prepare the project database.

  Please enter the name of your project.
  This name will be used in page titles and descriptions.

  Project Name [My Project]&gt; ytqpki

  Please specify the connection string for the database to use.
  By default, a local SQLite database is created in the environment
  directory. It is also possible to use an already existing
  PostgreSQL database (check the Trac documentation for the exact
  connection string syntax).

  Database connection string [sqlite:db/trac.db]&gt;

  Please specify the type of version control system,
  By default, it will be svn.

  If you don't want to use Trac with version control integration,
  choose the default here and don't specify a repository directory.
  in the next question.

  Repository type [svn]&gt;

  Please specify the absolute path to the version control
  repository, or leave it blank to use Trac without a repository.
  You can also set the repository location later.

  Path to repository [/path/to/repos]&gt; /data/ytqpki

  Please enter location of Trac page templates.
  Default is the location of the site-wide templates installed with Trac.

  Templates directory [/usr/share/trac/templates]&gt;

  Creating and Initializing Project
  Installing default wiki pages
  /usr/share/trac/wiki-default/TracFastCgi =&gt; TracFastCgi
  /usr/share/trac/wiki-default/TracIni =&gt; TracIni
  /usr/share/trac/wiki-default/TracReports =&gt; TracReports
  /usr/share/trac/wiki-default/TracTickets =&gt; TracTickets
  /usr/share/trac/wiki-default/TracSearch =&gt; TracSearch
  /usr/share/trac/wiki-default/TracModPython =&gt; TracModPython
  /usr/share/trac/wiki-default/WikiRestructuredTextLinks =&gt; WikiRestructuredTextLinks
  /usr/share/trac/wiki-default/InterTrac =&gt; InterTrac
  /usr/share/trac/wiki-default/CamelCase =&gt; CamelCase
  /usr/share/trac/wiki-default/TracBrowser =&gt; TracBrowser
  /usr/share/trac/wiki-default/WikiNewPage =&gt; WikiNewPage
  /usr/share/trac/wiki-default/TracAccessibility =&gt; TracAccessibility
  /usr/share/trac/wiki-default/InterWiki =&gt; InterWiki
  /usr/share/trac/wiki-default/TracNotification =&gt; TracNotification
  /usr/share/trac/wiki-default/TracLinks =&gt; TracLinks
  /usr/share/trac/wiki-default/TracCgi =&gt; TracCgi
  /usr/share/trac/wiki-default/TracRevisionLog =&gt; TracRevisionLog
  /usr/share/trac/wiki-default/WikiFormatting =&gt; WikiFormatting
  /usr/share/trac/wiki-default/TracAdmin =&gt; TracAdmin

  Warning:

  You should install the SVN bindings

  ———————————————————————
  Project environment for 'ytqpki' created.

  You may now configure the environment by editing the file:

  /home/ytqpki/conf/trac.ini

  If you'd like to take this new project environment for a test drive,
  try running the Trac standalone web server `tracd`:

  tracd –port 8000 /home/ytqpki

  Then point your browser to http://localhost:8000/ytqpki.
  There you can also browse the documentation for your installed
  version of Trac, including information on further setup (such as
  deploying Trac to a real web server).

  The latest documentation can also always be found on the project
  website:

  http://trac.edgewall.org/

  Congratulations!
</code></pre></li>
</ol>


<p>如果最后出现类似上面的信息,表示配置成功,trac可以独立运行,也可以集成到apache里,我们先看独立运行的方式
<code>tracd --port 8000 /home/ytqpki</code>
打开浏览器,访问<a href="http://localhost:8000/ytqpki">http://localhost:8000/ytqpki</a>
应该可以trac的默认首页,类似下面这样:</p>

<p><img src="/uploads/screen2.png" alt="image" /></p>

<ol>
<li><p>集成trac到apache<br/>
把trac集成的到apache有很多方法,可以使用<code>mod_python</code>模块,可以使用cgi模块或者<code>fast-cgi</code>模块.<code>mod_python</code>我配置了一下,没有成功,于是改用了cgi模式<br/>
这个方法比较简单.如果你需要速度快一点,那使用fast-cgi好了.<br/>
首先把trac源代码目录中<code>cgi-bin</code>目下的两个文件拷贝到你期望的地方,比如<code>/var/www/cgi-bin</code>.我这里是放到<code>/home/cgi-bin</code>目录下的.
然后增加<code>/etc/httpd/conf.d/trac.conf</code>文件,内容如下</p>

<pre><code>  ScriptAlias /trac /home/cgi-bin/trac.fcgi

  # Trac needs to know where the database is located

  SetEnv TRAC_ENV /home/ytqpki


  AuthType Basic
  AuthName “Trac”
  AuthUserFile /etc/svnpwdfile
  Require valid-user
</code></pre></li>
</ol>


<p>如果你使用的是cgi模式,那么把第一行的<code>trac.fcgi</code>,修改成<code>trac.cgi</code><br/>
密码文件我们和svn共享,这样就只需要管理一套密码了.<br/>
保存,退出,重启apache.再访问<a href="http://localhost/trac">http://localhost/trac</a>看看是不是可以得到trac的默认首页,然后点击"browse
source",你应该可以看到svn仓库里的资源.类似下面这样</p>

<p><img src="/uploads/screen3.png" alt="image" /></p>

<p>随便点击一个源代码文件,可以得到类似下面的界面</p>

<p><img src="/uploads/screen4.png" alt="image" /></p>

<p>不知道是不是需要继续配置,浏览源代码时,源代码里的中文不能显示.</p>

<p>到此,全部配置完成,当然这都是采用最简单,缺省的方式配置起来的,有关授权访问没有细化,不过这都是一些再细化的工作了,至少框架搭建起来了.
再配合支持svn的开发工具,比如Eclipse,Komodo,开发起来还是比较有安全感的.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript+xml+xslt实现动态分页]]></title>
    <link href="http://wgzhao.github.io/2004/10/19/paging-using-javascript-xml-xslt/"/>
    <updated>2004-10-19T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2004/10/19/paging-using-javascript-xml-xslt</id>
    <content type="html"><![CDATA[<p>经过两天的测试，终于搞定了再两种浏览器上都可以实现的动态分页的xml编程代码。<br/>
由于这些代码都是在客户端执行，这无疑给哪些负载较大的服务器带来了好处。</p>

<p>首先申明：该代码不能保证再所有IE5.5以上的浏览器都能通过，我实在想不通，就IE那么烂的浏览器居然会有那么多人用，光javascript报错就是等于没说，而且还能糊弄别人，和mozilla的javascript调试器相比，IE可以钻到地逢里面去了。<br/>
好不容易下载了MS声称加强了的调试器，依然是小儿科，我真的不知道MS是不是把顾客当宝弄。<br/>
算了，不说这些了，反正我的Jscript也没怎么学，就当成我无法理解MS的javascript吧。</p>

<p>两个文件保存到了<a href="https://github.com">github</a>里，可以点击下面的链接下载：</p>

<p><a href="https://gist.github.com/4419135">books_grid.xml</a></p>

<p><a href="https://gist.github.com/4419146">grid.xsl</a></p>
]]></content>
  </entry>
  
</feed>
