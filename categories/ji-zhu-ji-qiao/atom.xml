<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术技巧 | Linux系统管理]]></title>
  <link href="http://wgzhao.github.io//categories/ji-zhu-ji-qiao/atom.xml" rel="self"/>
  <link href="http://wgzhao.github.io/"/>
  <updated>2014-03-15T13:10:39+08:00</updated>
  <id>http://wgzhao.github.io/</id>
  <author>
    <name><![CDATA[wgzhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[彻底屏蔽优酷广告]]></title>
    <link href="http://wgzhao.github.io/2013/01/14/block-youku-ads-cleanly/"/>
    <updated>2013-01-14T21:21:00+08:00</updated>
    <id>http://wgzhao.github.io/2013/01/14/block-youku-ads-cleanly</id>
    <content type="html"><![CDATA[<p>很早以前，江湖上就有利用在<code>hosts</code>文件屏蔽<a href="http://www.youku.com" title="优酷视频">优酷</a>广告服务器IP地址的方式来达到屏蔽其广告的秘笈。可惜秘笈没有使用多久，就被<a href="http://www.youku.com" title="优酷视频">优酷</a>用黑屏广告给攻击了。有图有真相:
<img src="http://img.ly/system/uploads/006/622/759/original_youku-ads-black-screen.jpg" alt="image" /></p>

<p>于是，江湖人事继续苦练内功后，又推出了目前能完整屏蔽优酷广告的秘笈。此秘笈如下：</p>

<!--more-->


<h3>步骤一：修改Hosts，屏蔽广告服务器IP地址。</h3>

<p>Unix/Linux/Mac用户，编辑/etc/hosts文件，Windows用户编辑<code>C:\Windows\System32\drivers\etc\hosts</code>文件，在文件的最后，添加下面几行：
<code>
127.0.0.1       atm.youku.com
127.0.0.1       fvid.atm.youku.com
127.0.0.1       html.atm.youku.com
127.0.0.1       valb.atm.youku.com
127.0.0.1       valc.atm.youku.com
127.0.0.1       valf.atm.youku.com
127.0.0.1       valo.atm.youku.com
127.0.0.1       valp.atm.youku.com
127.0.0.1       vid.atm.youku.com
127.0.0.1       walp.atm.youku.com
127.0.0.1       lstat.youku.com
127.0.0.1       speed.lstat.youku.com
127.0.0.1       static.lstat.youku.com
127.0.0.1       urchin.lstat.youku.com
127.0.0.1       stat.youku.com
</code></p>

<h3>步骤二，欺骗Flash</h3>

<p>这里假定你用的浏览器是<a href="http://www.google.com/chrome" title="Google Chrome Browser">chrome</a>,其他浏览器则可以使用类似的办法：</p>

<p>Linux用户，找到类似下面的目录</p>

<p><code>$HOME/.config/google-chrome/Default/Pepper Data/Shockwave Flash/WritableRoot/#SharedObjects/CAGM6W4E</code></p>

<p>Mac用户，找到类似下面的目录</p>

<p><code>$HOME/Library/Application Support/Google/Chrome/Default/Pepper Data/Shockwave Flash/WritableRoot/#SharedObjects/CAGM6W4E</code></p>

<p>Windows XP用户找到类似下面的目录</p>

<p><code>C:\Documents and Settings\Administrator\Application Data\Macromedia\Flash Player\#SharedObjects\CAGM6W4E</code></p>

<p>Windows 7 用户找到类似下面的目录</p>

<p><code>C:\Users\Administrator\AppData\Roaming\Macromedia\Flash Player\#SharedObjects\CAGM6W4E</code></p>

<p>其中最后一次目录<code>CAGM6W4E</code>是一个随机字符串，所以很有可能每个每个人的这个目录名都不同。</p>

<p>在这个目录下，可以看到有一个名为<code>static.youku.com</code>的文件夹。删除此文件夹，然后创建一个空文件，文件名取名为<code>static.youku.com</code>，Windows用户要特别注意文件后缀问题。Linux/Mac用户建议用下面的指令一次你给搞定。</p>

<p><code>rm -rf static.youku.com &amp;&amp; touch static.youku.com</code></p>

<p>到此，秘笈完成。再打开<a href="http://www.youku.com" title="优酷视频">优酷</a>视频，看看还有没有广告。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些Mac OS X 的使用技巧]]></title>
    <link href="http://wgzhao.github.io/2012/12/30/some-tips-for-mac-os-x/"/>
    <updated>2012-12-30T22:08:00+08:00</updated>
    <id>http://wgzhao.github.io/2012/12/30/some-tips-for-mac-os-x</id>
    <content type="html"><![CDATA[<p>下面的这些Mac上使用的小技巧都来自<a href="http://pragprog.com/book/ktmack2/mac-kung-fu">《Mac Kung Fu(2nd edition)》</a> 这本书，改书讲述了超过400个使用Mac的技巧，但是个人感觉很多技巧并不是那么实用，因此这里只摘录了个人觉得用得上的一些技巧。更详细和完善的技巧，大家可以点击<a href="http://pragprog.com/book/ktmack2/mac-kung-fu">这里</a>.</p>

<h3>FaceTime呼叫自动应答</h3>

<p>如果有人通过FaceTime呼叫你，默认情况下，你是需要点击接受才能建立起呼叫的，怎么才能做到自动应答呢，我们可以通过下面的方法</p>

<ol>
<li><p>打开你喜欢的终端，输入下面的指令</p>

<p> <code>defaults write com.apple.FaceTime AutoAcceptInvites -bool TRUE</code></p></li>
<li><p>接下来，架设你希望FaceTime ID(一般就是Apple ID)为wgzhao@gmail.com的人呼叫的时候，能够自动应答，那么就输入下面的指令：</p>

<p> <code>defaults write com.apple.FaceTime AutoAcceptInvitesFrom -array-add wgzhao@gmail.com</code></p>

<p> 如果你希望能够自动应答的联系人是通过手机号码呼入进来的，那就把上面的邮件地址换成手机号码，不过要注意的是，手机号码前需要加上国码标志，比如中国是+86,那么指令类似如下：<br/>
 <code>defaults write com.apple.FaceTime AutoAcceptInvitesFrom -array-add +8618612341234</code></p></li>
<li><p>重启FaceTime，然后试试，应该就可以了。</p></li>
</ol>


<p>如果你想删除自动应答，那很简单，删除上述两条指令就好了，类似如下：</p>

<p><code>default delete com.apple.FaceTime AutoAcceptInvites    
 default delete com.appple.FaceTime AutoAcceptInvitesFrom</code></p>

<p> 当然，你可以直接编辑<code>~/Library/Preferences/com.apple.FaceTime.plist</code>文件来删除上述两项.</p>

<!--more-->


<h3>讯息程序(Messages.app)的一些常用快捷键</h3>

<p><code>Message.app</code>是我在Mac上最常用的应用程序，也是一天使用时间很长的应用程序，因此掌握一些基本常用的快捷方式对提高效率还是很有帮助的。</p>

<ul>
<li><code>Control + Command + A/I/O/W</code> 设置状态为可用(A)，隐身(I)，离开(W)和离线(O)</li>
<li><code>Command + 1</code> 显示联系人列表</li>
<li><code>Control + Tab</code> 在聊天窗口左侧的联系人中来回切换</li>
<li><code>Option + Up/Down</code> 在消息输入框里，使用这个快捷键，可以循环显示之前发出的消息，这样要是要重新发上一次，或者上几次发出的消息，就用不着重新打字，或者粘贴复制了。而且即使关机，重启后，这些消息依然还是存在</li>
<li><code>Option + Command + B</code> 显示你正在聊天的人的地址簿信息，如果此人不在地址簿中，则创建一个。如果这个联系人在地址簿中的联系信息比较多，按这个快捷后，你会觉得比较壮观哟。</li>
<li><code>Shift + Command + I</code> 显示正在聊天人的简介</li>
<li><code>Option + Command + E</code> 用独立的邮件程序给当前聊天的人写一封电子邮件</li>
<li><code>Option + Command + L</code> 显示文件传送窗口</li>
<li><code>Shift + Command + K</code> 给对话增加时间戳</li>
<li><code>Option + Command + K</code> 永久删除对话，不能恢复</li>
<li><code>Shift + Command + E</code> 打开视频特效窗口，可以给你当前的视频增加特效，还记得TBBT里Amy和Sheldon的视频聊天不？</li>
</ul>


<h3>打开在终端里显示的链接</h3>

<p>如果你在终端(console)里看到一个邮件地址或者网页地址（比如打开man手册），如果你想打开这个链接，只需要按下<code>Command</code>键，然后把把鼠标移到链接上，鼠标形状就会变成熟悉的手形。点击链接，既可以打开.</p>

<h3>微调音量</h3>

<p>缺省情况下，使用音量调节按钮，每次都是一次增加或者减少一格音量。如果我们先按下<code>Shift</code>键和<code>Option</code>键，然后再按音量调整键，则把一格音量分成了4份，每次增加或者减少1/4格音量，非常方便。</p>

<h3>重启Finder</h3>

<p>最常见的重启<code>Finder</code>的方法是打开一个终端，然后输入<code>killall Finder</code>，这对终端控而言，无疑是最自然的重启方式，不过属于鼠标控而言，我们可以先按下<code>Option</code>键，然后在屏幕下方（也许你换了位置）的Dock上，右键点击<code>Finder</code>图标，在弹出的菜单中，选择<code>重启开始</code>即可</p>

<h3>计算所有文件大小</h3>

<p>如果你在<code>Finder</code>里用列表(list)视图查看文件或文件夹的时候，你可能可以看到每个文件的大小，但是对于文件夹而言，大小那一列，则是用<code>--</code>表示，这个时候，我们可以按<code>Command + J</code>快捷键来打开查看窗口，然后选中下方的<code>计算所有大小</code>，一旦选中，<code>Finder</code>就会立刻计算所有文件夹的大小并显示。这个设置是针对每个你查看的文件夹的，如果你希望这个设置是系统全局可用，那么点击刚才查看窗口的<code>用作默认</code>按钮即可。</p>

<p><img src="http://blog.wgzhao.com/uploads/560_1356920963.png" alt="560" /></p>

<h3>在快速查看里选择文本</h3>

<p>快速查看文件是Mac里一个非常方便的功能，使得我们不需要打开任何应用程序就可以预览绝大部分格式的文件。不过一个不太方便的地方是，在快速查看模式下，你没法选择文本。比如我快速查看一个文本文件，先复制其中某一段，就没办法，只能老老实实用文本编辑器打开，然后选择复制。现在我们可以通过下面的指令来做到这点：</p>

<p><code>defaults write com.apple.finder QLEnableTextSelection -bool TRUE; killall Finder</code></p>

<p>然后你再快速查看一个本文文件或者pdf文件等，看看是不是可以选择，复制了？</p>

<p>如果想去掉这个功能，那就删除上述条目好了</p>

<p><code>defaults delete com.apple.finder QLEnableTextSelection;killall Finder</code></p>

<h3>快速创建文件列表</h3>

<p>有什么办法可以快速创建一个包含当前目录下的所有文件及文件夹的列表文件吗？办法是肯定有的。<br/>
打开<code>Finder</code>，进入你要创建列表的文件夹，然后按下<code>Command+A</code>选中全部文件和文件夹，然后按<code>Command+C</code>,别担心，只是按下，这个时候不会复制的。然后打开文本编辑器(TextEdit.app)，切换到纯文本模式(<code>Shift + Command +T</code>)，然后按下<code>Command + V</code>粘贴，现在你看到的就是文件列表了，而不是真正的复制那些你拷贝的文件的内容。这个方法对所有可以切换到纯文本模式的字处理程序都有效，包括Word和Pages。</p>

<h3>一些符号的快捷键输入</h3>

<p>直到怎么快速打出Apple的logo不？直到怎么快速插入一些数学符号不？打开你的文本编辑器，试试下面的这些快捷键吧</p>

<h4>苹果符号</h4>

<p>按下<code>Shift+Option+K</code>就可以插入你经常可以在论坛中看到的Apple logo了()，不过要注意的是，在你的电脑上也许显示的是，但是并不意味着在别人的电脑上看到就是这个符号，这依赖于操作系统，比如Windows可能直接显示为一个框框，而Linux系统则有可能显示为另外一个符号</p>

<h4>版权符号</h4>

<p>按下<code>Option + G</code>就可以插入漂亮的版权符号(©)了。还有一个办法，就是你输入<code>(c)</code>后，按空格，也会自动变成版权符号</p>

<h4>货币符号</h4>

<p><code>Shift + 4</code>能输出<code>$</code>符号，这个地球人都知道了。当然如果是在中文输入法的情况下，它会输出人民币符号<code>￥</code>。下面说的都是在默认英语书法的情况下</p>

<ul>
<li>美分(¢): <code>Option + 4</code></li>
<li>英镑(£): <code>Option + 3</code></li>
<li>日元/人民币(¥): <code>Option + Y</code></li>
<li>欧元(€):<code>Shift + Option + 2</code></li>
</ul>


<h4>数学符号</h4>

<ul>
<li>约等于(≈): <code>Option + X</code></li>
<li>度(°): <code>Shift + Option + 8</code></li>
<li>除号(÷): <code>Option + /</code></li>
<li>无穷(∞): <code>Option + 5</code></li>
<li>小于等于(≤): <code>Option + ,</code></li>
<li>大于等于(≥): <code>Option + .</code></li>
<li>不等于(≠):  <code>Option + =</code></li>
<li>Pi(π):    <code>Option + P</code></li>
<li>加减(±):    <code>Shift + Option + =</code></li>
<li>平方根(√):    <code>Option + V</code></li>
<li>求和(∑):    <code>Option + W</code></li>
</ul>


<h4>商标符号</h4>

<p><code>Option + 2</code>可以显示商标符号(™)，<code>Option + R</code>可以获得注册商标符号(®),输入<code>(r)</code>后按下空格，也可以获得.</p>

<h3>屏幕截图</h3>

<p>最简单的对整个屏幕截图的快捷键是<code>Shift+Command+3</code>，默认会把快照照片保存到桌面，格式为png.
<code>Shift+Command+4</code>则允许你对特定的区域进行截图。</p>

<p>如果是想把截图放在剪贴板里而不是保存到桌面上，那就分别使用<code>Shift+Control+Command+3</code>和<code>Shift+Control+Command+4</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成随机字符串以及自动更新时间戳和返回最近插入的ID号]]></title>
    <link href="http://wgzhao.github.io/2012/08/24/generate-random-strings-and-other-tips-on-postgresql/"/>
    <updated>2012-08-24T22:04:00+08:00</updated>
    <id>http://wgzhao.github.io/2012/08/24/generate-random-strings-and-other-tips-on-postgresql</id>
    <content type="html"><![CDATA[<p><a href="http://www.postgresql.com" title="PostgreSQL">PostgreSQL</a>下的几条SQL语句小技巧。</p>

<h2>生成随机字符串</h2>

<p>这个是从<a href="http://momjian.us/main/blogs/pgblog/2012.html">别人的blog</a>上看到的，在做一些测试需要加载一些数据的时候用得上。于是摘录到这里</p>

<p>```sql</p>

<pre><code>SELECT(
   SELECT string_agg(x, '')
     FROM (
      SELECT chr(ascii('a') + floor(random() * 26)::integer)
           FROM generate_series(1, 40 + b * 0)
       ) AS y(x)
   )
FROM generate_series(1,5) as a(b);
                string_agg                
------------------------------------------
 hnwjotzpvihnglbcfamgffisgdyveqjlefvtzviu
 ephkbjmgkznqevikyggdxpocvkvugdpktxuuhhbr
 gohljpwiwclusawnkrirvxbovwjcdktjzbujrqrn
 tdildezovigqfhfbdodgzxpzykiqbaeudmghqfwm
 ncdtkiunxyuwwjvuuelvepqibwqrcneqphkzqenn
(5 rows)
</code></pre>

<p>```</p>

<p>生成的字符串在<code>[a-z]</code>之间，当然，你可以通过修改<code>chr(ascii('a')</code>和<code>floor(random() * 26)</code>这个算术来在更广泛的范围内获取随机字符。比如下面这个</p>

<!--more-->


<p>```sql</p>

<pre><code>SELECT
(
        SELECT string_agg(x, '')
        FROM (
                SELECT chr(ascii(' ') + floor(random() * 94)::integer)
                FROM generate_series(1, 40 + b * 0)
        ) AS y(x)
)
FROM generate_series(1,5) as a(b);
                string_agg                
------------------------------------------
 ,:D|^5jKD4&lt;VkxvplTSu&amp;bR_ w^Z+1,8KP6,e"W,
 7sc$m[t[2JS9/(x/!Yi,jvD7I[D0^{=up"y_^p=q
 &lt;q,Kz&amp;[{`G*L?Odh-*yk'8bx;]ZzPxmlkz:g#uec
 ?p2^BwIO$D&lt;,] &amp;y^`u0[e|Ha92d1xJPk\1/VZ^Z
 !{f^{mZ\PQl-9kVz&amp;ha8c-hPjy_BV@}W=f7;Uqw'
(5 rows)
</code></pre>

<p>```</p>

<h2>当记录有改动时，自动更新其时间戳</h2>

<p>这个功能我记得在<a href="http://www.mysql.com" title="mysql">MySQL</a>里是自动有的，对于类型是<code>date</code>，和<code>timestamp</code>的时候，可以选择修改时更新。但是在<a href="http://www.postgresql.com" title="PostgreSQL">PostgreSQL</a>里，提供到了利用<a href="http://www.postgresql.org/docs/9.1/static/rules-update.html">rule</a>的方式来和另外一个表联动修改。和我这里的需求有些差别，我这里的需求时，假定有一列的类型为<code>timestamp</code>，只要这一行有改动，那么就需要更新这个<code>timestamp</code>列。我们可以通过构建一个函数和一个触发器来达到目的，比如：</p>

<p>```sql</p>

<pre><code>create table customer (id int ,name varchar(10),modified timestamp default current_timestamp );

create or replace function update_modified_column()
     returns trigger as $$
     begin
        NEW.modified = now();
        return NEW;
     end;
$$ language 'plpgsql';

create trigger update_customer_modtime before update
on customer for each row execute procedure
update_modified_column();

-- example
wgzhao=# insert into customer values(1,'wgzhao'),(2,'lancy');

INSERT 0 2

wgzhao=# select * from customer;

 id |  name  |          modified         

----+--------+----------------------------

  1 | wgzhao | 2012-08-24 17:39:33.862608

  2 | lancy  | 2012-08-24 17:39:33.862608

(2 rows)



wgzhao=# update customer set name = 'nancy' where id = 2;

UPDATE 1

wgzhao=# select * from customer;

 id |  name  |          modified         

----+--------+----------------------------

  1 | wgzhao | 2012-08-24 17:39:33.862608

  2 | nancy  | 2012-08-24 17:39:57.870447

(2 rows)
</code></pre>

<p>```</p>

<h2>获得刚插入一行的ID号</h2>

<p>和<a href="http://www.mysql.com" title="mysql">MySQL</a>的<code>last_insert</code>函数类似，需要获得刚执行<code>insert</code>语句的<code>ID</code>号。这在<a href="http://www.postgresql.com" title="PostgreSQL">PostgreSQL</a>里用的是<code>insert</code>语句的<code>returning</code>子语句，对于<code>ID</code>列是否是自增（有序列）都生效，下面分别举一个<code>ID</code>是<code>serial</code>类型的和<code>ID</code>是<code>int</code>类型的例子：</p>

<p>```sql</p>

<pre><code>wgzhao=# create table foo(id int,name text);
CREATE 
wgzhao=# insert into foo values(1,'wgzhao')  
 id
----
  1
(1 row)

INSERT 0 1

wgzhao=# insert into foo values(3,'wgzhao') returning id;

 id
 ----
  3
(1 row)
INSERT 0 1

wgzhao=# create table bar(id serial,name text);
CREATE TABLE
wgzhao=# insert into bar(name) values('wgzhao') returning id;

 id
 ----
  1
(1 row)
INSERT 0 1

wgzhao=# insert into bar(name) values('wgzhao') returning id;
 id
 ----
  2
(1 row)
INSERT 0 1
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[升级blog编译环境]]></title>
    <link href="http://wgzhao.github.io/2012/08/14/upgrade-blog-environment/"/>
    <updated>2012-08-14T09:42:00+08:00</updated>
    <id>http://wgzhao.github.io/2012/08/14/upgrade-blog-environment</id>
    <content type="html"><![CDATA[<p>系统升级到Mountain Lion后，发现我的blog编译环境不能正常使用了，我的blog放弃<a href="http://www.wordpress.org" title="wordpress">wordpress</a>，采取了<a href="http://octopress.org" title="octopress: a blogging framework">octopress</a>，这玩意儿的好处是全静态，搬家的时候很容易，甚至可以随时搬迁到<a href="http://github.com" title="github">github</a>，<a href="http://www.dropbox.com" title="dropbox">dropbox</a>这类的空间上都没以问题。<br/>
麻烦的就是那套环境，<a href="http://www.ruby.org" title="ruby">ruby</a>本来也不熟悉，所以搞起来比较痛苦。
昨晚花了3个多小时才搞定，不停的清理环境，重新安装。<br/>
其中有两个问题记录如下 <br/>
一个是gcc的问题，<a href="http://www.ruby.org" title="ruby">ruby</a>一些组件的编译并不支持Mac自带的llvm-gcc特性。因此需要自行编译一个gcc，当然自己编译太痛苦了，幸运的是<a href="http://hpc.sourceforge.net/" title="High Performance Computer for Mac OS X">HPC for Mac OS X</a>网站已经编译好了针对Mac的，可以从其网站直接下载，省去的编译的痛苦
另外出现的一个问题是在执行<code>bundle install</code>的时候，会给出下面的报错</p>

<p><code>
creating Makefile  
extconf.rb:21:in `&lt;main&gt;': Only Darwin systems
greater than 8 (Mac OS X 10.5+) are supported (RuntimeError)
</code></p>

<p>这个报错的原因是<a href="http://octopress.org" title="octopress: a blogging framework">octopress</a>需要的<a href="https://github.com/thibaudgg/rb-fsevent/" title="rb-fsevent">rb-fsevent</a>的版本是<code>0.4.3.1</code>，这个版本还不支持Mountain Lion。简单的处理办法是修改<code>ext/extconf.rb</code>文件，找到19行，如下:
<code>sdk_version    = { 9 =&gt; '10.5', 10 =&gt; '10.6', 11 =&gt; '10.7' }[darwin_version]</code><br/>
修改为
<code>sdk_version    = { 9 =&gt; '10.5', 10 =&gt; '10.6', 11 =&gt; '10.7',12=&gt;'10.8' }[darwin_version]</code></p>

<p>删除第24行内容，如下</p>

<p><code>-isysroot #{xcode_path}/SDKs/MacOSX#{sdk_version}.sdk</code></p>

<p>然后编译安装即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动配置Mac OS X 的VPN连接时的特定路由]]></title>
    <link href="http://wgzhao.github.io/2011/09/07/routing-specific-ip-address-over-vpn-under-macosx/"/>
    <updated>2011-09-07T00:00:00+08:00</updated>
    <id>http://wgzhao.github.io/2011/09/07/routing-specific-ip-address-over-vpn-under-macosx</id>
    <content type="html"><![CDATA[<p>Mac 系统自带的VPN连接配置倒是方便，但是有一个毛病（或者说我还没有不知道使用）,那就是对于通过VPN获取的路有信息，要不就是全部忽略，要不就是所有的IP流出都通过vpn的路由，相当于由VPN的路由指定了缺省路由。用户没有办法手工增加特定路由。这点就不如Linux下的网络管理工具，比如Gnome的nm-applet使用起来就很方便。</p>

<p>当然，在图形界面配置上没有，不代码在命令行或者特殊的配置文件没有，下面我们就通过配置文件来解决这个问题。</p>

<!--more-->


<p>首先在/etc/ppp/目录下创建(或者修改）ip-up文件。这个文件实际上时pppd后台进程读取的，VPN也得通过它来拨号。</p>

<p>VPN拨号后，会传递一系列的参数给ip-up文件，比如拨号的设备（ppp0),拨号两端的ip地址，以及缺省路由。我们感兴趣的是$5这个参数。<br/>
该参数描述的是ppp链路服务端的ip地址，也就是我们需要的路由网关。我们可以通过这个参数来判断，从而加入不同的路由。比如你有多个VPN连接，那肯定需要通过判断不同的ppp0端IP地址而加入不同的路由。<br/>
脚本可以这样写：</p>

<p>``` bash</p>

<pre><code>if [ "${5:-}" = "192.168.15.10" ];then
     /sbin/route add -net 192.168.0.0/20 $5
fi
</code></pre>

<p>```</p>

<p>保存后，并设置该文件的权限为755 <code>chmod 755 ip-up</code> 你再连接VPN看看，是不是加上了脚本里的路由信息。：）</p>

<p>测试环境： Dell E6410，Mac OS X 10.7.2</p>
]]></content>
  </entry>
  
</feed>
